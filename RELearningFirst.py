# -*- coding: utf-8 -*-
import re

# 正则的归纳整理

# 元字符
'''
《元字符》
.    匹配除换行符以外的任意字符。
[]   字符类，匹配方括号中包含的任意字符。
[^]  否定字符类。匹配方括号中不包含的任意字符。
*    匹配前面的子表达式零次或多次。
+    匹配前面的子表达式一次或多次。
？    匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。
{n,m} 花括号，匹配前面字符至少n 次，但是不超过 m 次。
(xyz) 字符组，按照确切的顺序匹配字符xyz。
|     分支结构，匹配符号之前的字符或后面的字符。
\     转义符，它可以还原元字符原来的含义，允许你匹配保留字符[] () {} . * + ? ^ $ \ |
^     匹配行的开始。
$     匹配行的结束

'''

'''
1.1 英文句号
英文句号 . 是元字符的最简单的例子。 元字符 . 可以匹配任意单个字符。它不会匹配换行符和新行的字符。
例如正则表达式 .ar  表示：任意字符后面跟着一个字母 a ,再后面跟着一个字母 r 。

" .ar " ==> The car parked in the garage.
        ==>     car par           gar

'''

# match 从字符串其实位置开始匹配 开头没有符合规则的 就不再匹配 返回None
m = re.match('.ar','The car parked in the garage.')

# 匹配字符串中第一个 符合规则的 并返回 不再继续匹配
m = re.search('.ar','The car parked in the garage.')
print(m.group())

# 匹配所有符合规则的 并返回数组
m = re.findall('.ar','The car parked in the garage.')
print(m)

